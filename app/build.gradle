apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

//here is script to generate version code from version name
//which is set in gradle.properties as value of version var
//which must be in format major, minor, patch, where patch goes from 0 to 99
apply from: '../versioning.gradle'

apply from: '../marketSkusCreator.gradle'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    defaultConfig {
        applicationId "ru.dante.scpfoundation"
        minSdkVersion 17
        //TODO check when we can update it
        //noinspection OldTargetApi
        targetSdkVersion 25
        versionCode buildVersionCode()
        versionName version

        manifestPlaceholders = [debuggable: true]
        buildConfigField "boolean", "TIMBER_ENABLE", "true"
        buildConfigField('String', 'BASE_API_URL', '"http://scpfoundation.ru"')
        buildConfigField('String', 'SCP_API_URL', '"https://scpfoundation.net/_api/wikidot_tags_search/"')

        buildConfigField "String", "VK_API_VERSION", '"5.62"'

        buildConfigField('int', 'TIMEOUT_SECONDS_CONNECT', '60')
        buildConfigField('int', 'TIMEOUT_SECONDS_READ', '60')
        buildConfigField('int', 'TIMEOUT_SECONDS_WRITE', '60')

        buildConfigField('int', 'REALM_VERSION', '3')

        //play market refuses not hardcoded strings as intent filter
        resValue('string', 'receiver_action_timer', '"ru.dante.scpfoundation.receivers.ReceiverTimer"')
//        manifestPlaceholders = [receiver_action_timer: "ru.dante.scpfoundation.receivers.ReceiverTimer"]
        resValue('string', 'receiver_action_boot', '"android.intent.action.BOOT_COMPLETED"')
//        manifestPlaceholders = [receiver_action_boot: "android.intent.action.BOOT_COMPLETED"]

//        //add market skus to buildConfig
//        //there is a way to store it in res... but it's awful
//        //http://stackoverflow.com/a/41655569/3212712
//        //Load market SKUs
//        if (rootProject.file('marketSkus.properties').exists()) {
//            def marketSkusPropertiesFile = rootProject.file("marketSkus.properties");
//            def marketSkusProperties = new Properties()
//            marketSkusProperties.load(new FileInputStream(marketSkusPropertiesFile))
//
//            buildConfigField('String[]', 'OLD_SKUS', marketSkusProperties.get("marketSkusOld"))
//            buildConfigField('String[]', 'VER_2_SKUS', marketSkusProperties.get("marketSkusVer2"))
//            buildConfigField('String[]', 'INAPP_SKUS', marketSkusProperties.get("marketSkusInapp"))
//        } else {
//            throw new GradleException("You need to have marketSkus.properties file in root of project with " +
//                    "marketSkusOld," +
//                    "marketSkusVer2," +
//                    " variables to build project")
//        }
        //set API keys from secret file or with default values
        if (rootProject.file('apiKeys.properties').exists()) {
            def apiKeysPropertiesFile = rootProject.file("apiKeys.properties");
            def apiKeysProperties = new Properties()
            apiKeysProperties.load(new FileInputStream(apiKeysPropertiesFile))

            resValue('string', 'yandex_metrica_api_key', apiKeysProperties.get("yandexMetricaApiKey"))
            buildConfigField('String', 'YANDEX_METRICA_API_KEY', '"' + apiKeysProperties.get("yandexMetricaApiKey") + '"')

            resValue('string', 'ads_app_id', apiKeysProperties.get("adMobAppId"))
            buildConfigField('String', 'ADS_APP_ID', '"' + apiKeysProperties.get("adMobAppId") + '"')

            resValue('string', 'ad_unit_id_interstitial', apiKeysProperties.get("adsBannerIdInterstitial"))
            buildConfigField('String', 'AD_UNIT_ID_INTERSTITIAL', '"' + apiKeysProperties.get("adsBannerIdInterstitial") + '"')

            resValue('string', 'ad_unit_id_gallery_banner', apiKeysProperties.get("adsBannerIdGallery"))
            buildConfigField('String', 'AD_UNIT_ID_GALLERY_BANNER', '"' + apiKeysProperties.get("adsBannerIdGallery") + '"')

            resValue('string', 'ad_unit_id_article_screen_banner', apiKeysProperties.get("adsBannerIdArticleScreen"))
            buildConfigField('String', 'AD_UNIT_ID_ARTICLE_SCREEN_BANNER', '"' + apiKeysProperties.get("adsBannerIdArticleScreen") + '"')

            resValue('integer', 'com_vk_sdk_AppId', apiKeysProperties.get("vkSdkAppId"))
            buildConfigField('int', 'VK_SDK_APP_ID', apiKeysProperties.get("vkSdkAppId"))

            //use string, as so in facebook docs...
            resValue('string', 'facebook_app_id', apiKeysProperties.get("facebookAppId"))
            buildConfigField('String', 'FACEBOOK_APP_ID', '"' + apiKeysProperties.get("facebookAppId") + '"')

            resValue('string', 'firebase_db_url', apiKeysProperties.get("firebaseUri"))
            buildConfigField('String', 'FIREBASE_DB_URL', '"' + apiKeysProperties.get("firebaseUri") + '"')

            resValue('string', 'tools_api_url', apiKeysProperties.get("vpsApiAddress"))
            buildConfigField('String', 'TOOLS_API_URL', '"' + apiKeysProperties.get("vpsApiAddress") + '"')

            resValue('string', 'web_application_id', apiKeysProperties.get("webApplicationId"))
            buildConfigField('String', 'WEB_APPLICATION_ID', '"' + apiKeysProperties.get("webApplicationId") + '"')

            //TODO use firebase remote config for it
            resValue('string', 'non_cracked_user_uid', apiKeysProperties.get("nonCrackedUserUid"))
            buildConfigField('String', 'NON_CRACKED_USER_UID', '"' + apiKeysProperties.get("nonCrackedUserUid") + '"')
        } else {
            throw new GradleException("You need to have apiKeys.properties file in root of project with " +
                    "yandexMetricaApiKey," +
                    "adMobAppId," +
                    "adsBannerIdInterstitial," +
                    "vkSdkAppId," +
                    "firebaseUri," +
                    "vpsApiAddress" +
                    "webApplicationId" +
                    "vpsApiAddress" +
                    " variables to build project")
        }

        // Enabling multidex support.
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // Load keystore
            if (rootProject.file('keystore.properties').exists()) {
                def keystorePropertiesFile = rootProject.file("keystore.properties");
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "lang", "mode"

    productFlavors {
        prod {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: false]
            buildConfigField "boolean", "TIMBER_ENABLE", "false"
        }

        dev {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: true]
        }

        ru {
            dimension "lang"
        }

        en {
            dimension "lang"

            applicationIdSuffix ".eng"

//            println "config/${variant.productFlavors[0].name}/marketSkus.properties"
//            println "config/" + $variant.productFlavors[0].name + "/marketSkus.properties"
//
//            fillArrays("config/" + $variant.productFlavors[0].name + "/marketSkus.properties")

//            //add market skus to buildConfig
//            //there is a way to store it in res... but it's awful
//            //http://stackoverflow.com/a/41655569/3212712
//            //Load market SKUs
//            def pathToFileWithData = "config/" + "en" + "/marketSkus.properties"
//            if (rootProject.file(pathToFileWithData).exists()) {
//                def marketSkusPropertiesFile = rootProject.file(pathToFileWithData);
//                def properties = new Properties()
//                properties.load(new FileInputStream(marketSkusPropertiesFile))
//
//            buildConfigField('String[]', 'OLD_SKUS', properties.get("marketSkusOld"))
////                buildConfigField 'String[]', 'OLD_SKUS', properties.get("marketSkusOld")
//                buildConfigField('String[]', 'VER_2_SKUS', properties.get("marketSkusVer2"))
//                buildConfigField('String[]', 'INAPP_SKUS', properties.get("marketSkusInapp"))
//            } else {
//                logger.lifecycle('test: {}', pathToFileWithData)
////            throw new GradleException("You need to have marketSkus.properties file in root of project with " +
////                    "marketSkusOld," +
////                    "marketSkusVer2," +
////                    " variables to build project")
//            }
        }

//        applicationVariants.all { variant ->
//            def flavors = variant.productFlavors
//            // flavorDimensions "app" -> 0, "environment" -> 1
//            def app = flavors[0]
//            def environment = flavors[1]
//
////            variant.buildConfigField "String", "URL", "\"${app[environment.name]}\""
//            def pathToFile = "config/" + variant.productFlavors[0].name + "/marketSkus.properties"
//
//            fillArrays(pathToFile)
//        }

        applicationVariants.all { variant ->
            fillArrays(variant)
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //dagger2
    compile 'com.google.dagger:dagger:2.8'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.8'

    //sub project modules
    compile('ru.kuchanov.scp:scp-downloads:1.0.5@aar') { transitive = true }
    compile('ru.kuchanov.utils:rate:1.0.1@aar') { transitive = true }
    //test
//    compile project(':scpcore')
//    devReleaseCompile project(path: ':scpcore')
    compile project(path: ':scpcore', configuration: 'devRelease')
}

apply plugin: 'com.google.gms.google-services'