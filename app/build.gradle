apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

//here is script to generate version code from version name
//which is set in gradle.properties as value of version var
//which must be in format major, minor, patch, where patch goes from 0 to 99
apply from: '../versioning.gradle'

apply from: '../marketSkusCreator.gradle'
apply from: '../apiKeysCreator.gradle'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    defaultConfig {
        applicationId "ru.dante.scpfoundation"
        minSdkVersion 17
        //TODO check when we can update it
        //noinspection OldTargetApi
        targetSdkVersion 25
        versionCode buildVersionCode()
        versionName version

        manifestPlaceholders = [debuggable: true]
        buildConfigField "boolean", "TIMBER_ENABLE", "true"
        //TODO move to config
        buildConfigField('String', 'BASE_API_URL', '"http://scpfoundation.ru"')
        buildConfigField('String', 'SCP_API_URL', '"https://scpfoundation.net/_api/wikidot_tags_search/"')

        buildConfigField "String", "VK_API_VERSION", '"5.62"'

        buildConfigField('int', 'TIMEOUT_SECONDS_CONNECT', '60')
        buildConfigField('int', 'TIMEOUT_SECONDS_READ', '60')
        buildConfigField('int', 'TIMEOUT_SECONDS_WRITE', '60')

        //TODO move to config
        buildConfigField('int', 'REALM_VERSION', '3')

        //play market refuses not hardcoded strings as intent filter
        resValue('string', 'receiver_action_timer', '"ru.dante.scpfoundation.receivers.ReceiverTimer"')
//        manifestPlaceholders = [receiver_action_timer: "ru.dante.scpfoundation.receivers.ReceiverTimer"]
        resValue('string', 'receiver_action_boot', '"android.intent.action.BOOT_COMPLETED"')
//        manifestPlaceholders = [receiver_action_boot: "android.intent.action.BOOT_COMPLETED"]

        // Enabling multidex support.
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // Load keystore
            if (rootProject.file('keystore.properties').exists()) {
                def keystorePropertiesFile = rootProject.file("keystore.properties");
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "lang", "mode"

    productFlavors {
        prod {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: false]
            buildConfigField "boolean", "TIMBER_ENABLE", "false"
        }

        dev {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: true]
        }

        ru {
            dimension "lang"
        }

        en {
            dimension "lang"

            applicationIdSuffix ".eng"
        }

        applicationVariants.all { variant ->
            fillArrays(variant)
            fillApiArrays(variant)
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //dagger2
    compile 'com.google.dagger:dagger:2.8'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.8'

    //sub project modules
    compile('ru.kuchanov.scp:scp-downloads:1.0.5@aar') { transitive = true }
    compile('ru.kuchanov.utils:rate:1.0.1@aar') { transitive = true }
    //test
//    compile project(':scpcore')
//    devReleaseCompile project(path: ':scpcore')
    compile project(path: ':scpcore', configuration: 'devRelease')
}

apply plugin: 'com.google.gms.google-services'