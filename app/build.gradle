apply plugin: 'com.android.application'

//here is script to generate version code from version name
//which is set in gradle.properties as value of version var
//which must be in format major, minor, patch, where patch goes from 0 to 99
apply from: '../versioning.gradle'

apply from: 'https://raw.githubusercontent.com/mohaxspb/ScpFoundationCore/master/marketSkusCreator.gradle'
apply from: 'https://raw.githubusercontent.com/mohaxspb/ScpFoundationCore/master/apiKeysCreator.gradle'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "ru.dante.scpfoundation"
        minSdkVersion 17
        targetSdkVersion 26

        // Enabling multidex support.
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // Load keystore
            if (rootProject.file('keystore.properties').exists()) {
                def keystorePropertiesFile = rootProject.file("keystore.properties");
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "lang", "mode"

    productFlavors {
        prod {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: false]
        }

        dev {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: true]
        }

        ru {
            dimension "lang"
            matchingFallbacks = ['debug', 'release']
        }

        en {
            dimension "lang"

            applicationIdSuffix ".eng"
            matchingFallbacks = ['debug', 'release']
        }

        pl {
            dimension "lang"

            applicationIdSuffix ".pl"
            matchingFallbacks = ['debug', 'release']
        }

        de {
            dimension "lang"

            applicationIdSuffix ".de"
            matchingFallbacks = ['debug', 'release']
        }

        fr {
            dimension "lang"

            applicationIdSuffix ".fr"
            matchingFallbacks = ['debug', 'release']
        }

        es {
            dimension "lang"

            applicationIdSuffix ".es"
            matchingFallbacks = ['debug', 'release']
        }

        italy {
            dimension "lang"

            applicationIdSuffix ".it"
            matchingFallbacks = ['debug', 'release']
        }

        applicationVariants.all { variant ->
            fillArrays(variant, false)
            fillApiArrays(variant, false)

            variant.mergedFlavor.versionCode = buildVersionCodeFromVariant(variant)
            variant.mergedFlavor.versionName = getVersionValueAsString(variant)

            //need this as in new gradle plugin there broken functionality of iterating variant during build
            //so we need to set version so
            //see https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#variant_output
            variant.outputs.all { output ->
                output.versionCodeOverride = versionCode
                output.versionNameOverride = versionName
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
//    //dev
//    ruDevReleaseCompile
//    enDevReleaseCompile
//    plDevReleaseCompile
//    deDevReleaseCompile
//    frDevReleaseCompile
//    esDevReleaseCompile
//    italyDevReleaseCompile
//    //prod
//    ruProdReleaseCompile
//    enProdReleaseCompile
//    plProdReleaseCompile
//    deProdReleaseCompile
//    frProdReleaseCompile
//    esProdReleaseCompile
//    italyProdReleaseCompile

//    //dev
//    ruDevReleaseImplementation
//    enDevReleaseImplementation
//    plDevReleaseImplementation
//    deDevReleaseImplementation
//    frDevReleaseImplementation
//    esDevReleaseImplementation
//    italyDevReleaseImplementation
//    //prod
//    ruProdReleaseImplementation
//    enProdReleaseImplementation
//    plProdReleaseImplementation
//    deProdReleaseImplementation
//    frProdReleaseImplementation
//    esProdReleaseImplementation
//    italyProdReleaseImplementation


    ruDevReleaseApi
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //dagger2
    String daggerVersion = '2.11'
    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    //to use lib via gradle add this lines:
    //leakcanary (we need it here too according to https://github.com/square/leakcanary/issues/514#issuecomment-318203708)
    String leakcanaryVersion = '1.5.4'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanaryVersion"
    //add core itself at last for each configuration
    String coreVersion = '1.2.2'
//    ruDevReleaseCompile("ru.kuchanov.scp:core:$coreVersion@aar") { transitive = true }
//    ruDevReleaseCompile("ru.kuchanov.scp:core:$coreVersion:devRelease@aar") { transitive = true }
//    enDevReleaseCompile("ru.kuchanov.scp:core:$coreVersion:devRelease@aar") { transitive = true }
//    plDevReleaseCompile("ru.kuchanov.scp:core:$coreVersion:devRelease@aar") { transitive = true }
//    deDevReleaseCompile("ru.kuchanov.scp:core:$coreVersion:devRelease@aar") { transitive = true }
//    frDevReleaseCompile("ru.kuchanov.scp:core:$coreVersion:devRelease@aar") { transitive = true }
//    esDevReleaseCompile("ru.kuchanov.scp:core:$coreVersion:devRelease@aar") { transitive = true }
//    italyDevReleaseCompile("ru.kuchanov.scp:core:$coreVersion:devRelease@aar") { transitive = true }
//    //prod
//    ruProdReleaseCompile("ru.kuchanov.scp:core:$coreVersion:prodRelease@aar") { transitive = true }
//    enProdReleaseCompile("ru.kuchanov.scp:core:$coreVersion:prodRelease@aar") { transitive = true }
//    plProdReleaseCompile("ru.kuchanov.scp:core:$coreVersion:prodRelease@aar") { transitive = true }
//    deProdReleaseCompile("ru.kuchanov.scp:core:$coreVersion:prodRelease@aar") { transitive = true }
//    frProdReleaseCompile("ru.kuchanov.scp:core:$coreVersion:prodRelease@aar") { transitive = true }
//    esProdReleaseCompile("ru.kuchanov.scp:core:$coreVersion:prodRelease@aar") { transitive = true }
//    italyProdReleaseCompile("ru.kuchanov.scp:core:$coreVersion:prodRelease@aar") { transitive = true }
//    ruDevReleaseImplementation("ru.kuchanov.scp:core:$coreVersion:devRelease@aar")

    ruDevReleaseApi 'ru.kuchanov.scp:core:1.2.2'
}

apply plugin: 'com.google.gms.google-services'