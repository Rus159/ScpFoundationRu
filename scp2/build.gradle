apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'

//here is script to generate version code from version name
//which is set in gradle.properties as value of version var
//which must be in format major, minor, patch, where patch goes from 0 to 99
apply from: '../versioning.gradle'

ext.supportLibraryVersion = '25.3.1'
ext.googleLibraryVersion = '10.2.1'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    defaultConfig {
        applicationId "ru.dante.scpfoundation"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode buildVersionCode()
        versionName version

        manifestPlaceholders = [debuggable: true]
        buildConfigField "boolean", "TIMBER_ENABLE", "true"
        buildConfigField('String', 'BASE_API_URL', '"http://scpfoundation.ru"')

        buildConfigField "String", "VK_API_VERSION", '"5.62"'

        buildConfigField('int', 'TIMEOUT_SECONDS_CONNECT', '60')
        buildConfigField('int', 'TIMEOUT_SECONDS_READ', '60')
        buildConfigField('int', 'TIMEOUT_SECONDS_WRITE', '60')

        //play market refuses not hardcoded strings as intent filter
        resValue('string', 'receiver_action_timer', '"ru.dante.scpfoundation.receivers.ReceiverTimer"')
//        manifestPlaceholders = [receiver_action_timer: "ru.dante.scpfoundation.receivers.ReceiverTimer"]
        resValue('string', 'receiver_action_boot', '"android.intent.action.BOOT_COMPLETED"')
//        manifestPlaceholders = [receiver_action_boot: "android.intent.action.BOOT_COMPLETED"]

        //add market skus to buildConfig
        //there is a way to store it in res... but it's awful
        //http://stackoverflow.com/a/41655569/3212712
        //Load market SKUs
        if (rootProject.file('marketSkus.properties').exists()) {
            def marketSkusPropertiesFile = rootProject.file("marketSkus.properties");
            def marketSkusProperties = new Properties()
            marketSkusProperties.load(new FileInputStream(marketSkusPropertiesFile))

            buildConfigField('String[]', 'OLD_SKUS', marketSkusProperties.get("marketSkusOld"))
            buildConfigField('String[]', 'VER_2_SKUS', marketSkusProperties.get("marketSkusVer2"))
        } else {
            throw new GradleException("You need to have marketSkus.properties file in root of project with " +
                    "marketSkusOld," +
                    "marketSkusVer2," +
                    " variables to build project")
        }
        //set API keys from secret file or with default values
        if (rootProject.file('apiKeys.properties').exists()) {
            def apiKeysPropertiesFile = rootProject.file("apiKeys.properties");
            def apiKeysProperties = new Properties()
            apiKeysProperties.load(new FileInputStream(apiKeysPropertiesFile))

            resValue('string', 'yandex_metrica_api_key', apiKeysProperties.get("yandexMetricaApiKey"))
            buildConfigField('String', 'YANDEX_METRICA_API_KEY', '"' + apiKeysProperties.get("yandexMetricaApiKey") + '"')

            resValue('string', 'ads_app_id', apiKeysProperties.get("adMobAppId"))
            buildConfigField('String', 'ADS_APP_ID', '"' + apiKeysProperties.get("adMobAppId") + '"')

            resValue('string', 'ad_unit_id_interstitial', apiKeysProperties.get("adsBannerIdInterstitial"))
            buildConfigField('String', 'AD_UNIT_ID_INTERSTITIAL', '"' + apiKeysProperties.get("adsBannerIdInterstitial") + '"')

            resValue('string', 'ad_unit_id_gallery_banner', apiKeysProperties.get("adsBannerIdGallery"))
            buildConfigField('String', 'AD_UNIT_ID_GALLERY_BANNER', '"' + apiKeysProperties.get("adsBannerIdGallery") + '"')

            resValue('integer', 'com_vk_sdk_AppId', apiKeysProperties.get("vkSdkAppId"))
            buildConfigField('int', 'VK_SDK_APP_ID', apiKeysProperties.get("vkSdkAppId"))

            resValue('string', 'firebase_db_url', apiKeysProperties.get("firebaseUri"))
            buildConfigField('String', 'FIREBASE_DB_URL', '"' + apiKeysProperties.get("firebaseUri") + '"')

            resValue('string', 'tools_api_url', apiKeysProperties.get("vpsApiAddress"))
            buildConfigField('String', 'TOOLS_API_URL', '"' + apiKeysProperties.get("vpsApiAddress") + '"')
        } else {
            throw new GradleException("You need to have apiKeys.properties file in root of project with " +
                    "yandexMetricaApiKey," +
                    "adMobAppId," +
                    "adsBannerIdInterstitial," +
                    "vkSdkAppId," +
                    "firebaseUri," +
                    "vpsApiAddress" +
                    " variables to build project")
        }

        // Enabling multidex support.
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // Load keystore
            if (rootProject.file('keystore.properties').exists()) {
                def keystorePropertiesFile = rootProject.file("keystore.properties");
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    productFlavors {
        prod {
            manifestPlaceholders = [myDebuggable: false]
            buildConfigField "boolean", "TIMBER_ENABLE", "false"
        }

        dev {
            manifestPlaceholders = [myDebuggable: true]
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //support libs
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:support-annotations:$supportLibraryVersion"
    compile "com.android.support:animated-vector-drawable:$supportLibraryVersion"
    compile "com.android.support:support-v13:$supportLibraryVersion"
    //multidex to support more than 65K methods
    compile 'com.android.support:multidex:1.0.1'
    //rx
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.2.2'
    // Retrofit
    compile('com.squareup.retrofit2:retrofit:2.1.0') {
        exclude module: 'okhttp'
    }
    compile 'com.squareup.okhttp3:okhttp:3.5.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    //realm parcel
    compile 'org.parceler:parceler-api:1.1.6'
    annotationProcessor 'org.parceler:parceler:1.1.6'
    //jsoup
    compile 'org.jsoup:jsoup:1.10.1'
    //logs
    compile 'com.jakewharton.timber:timber:4.3.1'
    //dagger2
    compile 'com.google.dagger:dagger:2.8'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.8'
    //butterKnife
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    //image
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.chrisbanes:PhotoView:1.3.1'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    //mvp
    compile 'com.hannesdorfmann.mosby:mvp:2.0.1'
    //vk
    compile 'com.vk:androidsdk:1.6.7'
    //dialogs
    compile 'com.afollestad.material-dialogs:core:0.9.1.0'
    //fonts
    compile 'uk.co.chrisjenx:calligraphy:2.2.0'
    //firebase
    compile "com.google.firebase:firebase-config:$googleLibraryVersion"
    compile "com.google.firebase:firebase-crash:$googleLibraryVersion"
    compile "com.google.firebase:firebase-core:$googleLibraryVersion"
    compile "com.google.firebase:firebase-analytics:$googleLibraryVersion"
    compile "com.google.firebase:firebase-invites:$googleLibraryVersion"
    compile "com.google.firebase:firebase-ads:$googleLibraryVersion"
    compile "com.google.firebase:firebase-database:$googleLibraryVersion"
    compile "com.google.firebase:firebase-auth:$googleLibraryVersion"
    //appodeal
    compile project(':cheetah-mobile-3.4.7')
    compile "com.google.android.gms:play-services-ads:$googleLibraryVersion"
    //need for appodeal
    compile "com.google.android.gms:play-services-location:$googleLibraryVersion"
    // AppMetrica
    compile 'com.yandex.android:mobmetricalib:2.60'
    //ratingBar
    compile 'com.github.techery:properratingbar:0.0.5'
    //recyclerView fast scroller
    compile 'xyz.danoz:recyclerviewfastscroller:0.1.3'
}

apply plugin: 'com.google.gms.google-services'